
#include "DataTypes.h"
#include "Interface.h"


namespace
{
    bool test(
        std::string&    Filename,
        VERTICES_T      ExpectedVertices,
        size_t          ExpectedPolygons)
    {
        VERTICES_T  vertices;
        size_t      polygons = 0u;

        if(!read_map(vertices, polygons, Filename))
        {
            fprintf(stderr, "%s:%d:%s: Failed to read polygons\n", __FILE__, __LINE__, __FUNCTION__);
            return false;
        }

        if (polygons != ExpectedPolygons)
        {
            fprintf(stderr, "%s:%d:%s: Invalid number of polygons\n", __FILE__, __LINE__, __FUNCTION__);
            return false;
        }

        if (vertices.size() != ExpectedVertices.size())
        {
            fprintf(stderr, "%s:%d:%s: Invalid number of vertices\n", __FILE__, __LINE__, __FUNCTION__);
            return false;
        }

        for (size_t i = 0u; i < vertices.size(); i++)
        {
            if ((vertices[i].X != ExpectedVertices[i].X) || ((vertices[i].Y != ExpectedVertices[i].Y)))
            {
                fprintf(stderr, "%s:%d:%s: Invalid vertex\n", __FILE__, __LINE__, __FUNCTION__);
                return false;
            }
        }

        return true;
    }
}


int main()
{
    std::string         filename_1          = "../../../Maps/Map1.txt";
    std::string         filename_2          = "../../../Maps/Map2.txt";
    std::string         filename_3          = "../../../Maps/Map3.txt";

    const size_t        expected_polygons_1 = 7u;
    const size_t        expected_polygons_2 = 15u;
    const size_t        expected_polygons_3 = 5u;

    const VERTICES_T    expected_vertices_1 = {
        {    4,    0 }, {    2,    8 }, {    2,   16 }, {    4,   16 }, {    4,    8 },
        {    4,    0 }, {    8,   13 }, {    8,   16 }, {    9,   16 }, {    9,   13 },
        {    4,    0 }, {   12,   11 }, {   12,   14 }, {   15,   14 }, {   15,   11 },
        {    4,    0 }, {    7,    6 }, {    7,   10 }, {    9,   10 }, {    9,    6 },
        {    4,    0 }, {    1,    3 }, {    1,    6 }, {    4,    6 }, {    4,    3 },
        {    4,    0 }, {    5,    1 }, {    5,    2 }, {    9,    2 }, {    9,    1 },
        {    4,    0 }, {   11,    0 }, {   11,    8 }, {   13,    8 }, {   13,    0 } };

    const VERTICES_T    expected_vertices_2 = {
        {    4,    0 }, {  600, 1800 }, {  650, 1900 }, {  750, 1850 }, {  850, 1650 }, {    0,    0 },
        {    4,    0 }, {  100,  600 }, {  180,  700 }, {  300,  600 }, {  220,  450 }, {    0,    0 },
        {    4,    0 }, {  200,  850 }, {  250, 1100 }, {  350, 1150 }, {  350,  750 }, {    0,    0 },
        {    5,    0 }, {  200, 1250 }, {  100, 1450 }, {  250, 1800 }, {  400, 1500 }, {  350, 1200 },
        {    4,    0 }, {  450,   50 }, {  350,  200 }, {  500,  350 }, {  900,   50 }, {    0,    0 },
        {    5,    0 }, {  600,  350 }, {  550,  500 }, {  550,  600 }, {  700,  600 }, {  850,  500 },
        {    4,    0 }, {  450,  850 }, {  500, 1100 }, {  600, 1200 }, {  550,  750 }, {    0,    0 },
        {    4,    0 }, {  900,  450 }, {  850,  650 }, { 1100,  700 }, { 1200,  500 }, {    0,    0 },
        {    5,    0 }, {  850,  950 }, {  800, 1300 }, {  900, 1350 }, { 1100, 1200 }, { 1100,  900 },
        {    5,    0 }, { 1250,  600 }, { 1300,  700 }, { 1400,  650 }, { 1500,  500 }, { 1350,  350 },
        {    4,    0 }, { 1150, 1200 }, { 1300, 1250 }, { 1400, 1000 }, { 1200,  950 }, {    0,    0 },
        {    5,    0 }, { 1150, 1550 }, { 1050, 1800 }, { 1100, 1850 }, { 1300, 1750 }, { 1250, 1500 },
        {    4,    0 }, { 1500,  900 }, { 1600,  950 }, { 1750,  750 }, { 1700,  700 }, {    0,    0 },
        {    4,    0 }, { 1400, 1300 }, { 1350, 1650 }, { 1450, 1700 }, { 1650, 1400 }, {    0,    0 },
        {    4,    0 }, { 1650, 1050 }, { 1700, 1300 }, { 1950, 1200 }, { 1900,  950 }, {    0,    0 } };

    const VERTICES_T    expected_vertices_3 = {
        {   26,    0 }, {   10,  140 }, {   10,  150 }, {   20,  150 }, {   20,  170 }, {   30,  170 }, {   30,  180 }, {   40,  180 }, {   40,  190 },
        {   50,  190 }, {   50,  200 }, {   60,  200 }, {   60,  190 }, {   70,  190 }, {   70,  180 }, {   80,  180 }, {   80,  150 }, {   70,  150 },
        {   70,  140 }, {   60,  140 }, {   60,  130 }, {   40,  130 }, {   40,  120 }, {   30,  120 }, {   30,  130 }, {   20,  130 }, {   20,  140 },

        {   20,    0 }, {   90,  140 }, {   90,  150 }, {  100,  150 }, {  100,  180 }, {  120,  180 }, {  120,  190 }, {  130,  190 }, {  130,  180 },
        {  150,  180 }, {  150,  170 }, {  160,  170 }, {  160,  160 }, {  150,  160 }, {  150,  140 }, {  130,  140 }, {  130,  130 }, {  110,  130 },
        {  110,  120 }, {  100,  120 }, {  100,  140 }, {    0,    0 }, {    0,    0 }, {    0,    0 }, {    0,    0 }, {    0,    0 }, {    0,    0 },

        {   20,    0 }, {  160,  100 }, {  160,  120 }, {  170,  120 }, {  170,  130 }, {  180,  130 }, {  180,  140 }, {  190,  140 }, {  190,  150 },
        {  210,  150 }, {  210,  160 }, {  220,  160 }, {  220,  140 }, {  230,  140 }, {  230,  130 }, {  220,  130 }, {  220,  100 }, {  210,  100 },
        {  210,   90 }, {  180,   90 }, {  180,  100 }, {    0,    0 }, {    0,    0 }, {    0,    0 }, {    0,    0 }, {    0,    0 }, {    0,    0 },

        {   10,    0 }, {  190,  200 }, {  190,  210 }, {  200,  210 }, {  200,  230 }, {  220,  230 }, {  220,  220 }, {  230,  220 }, {  230,  190 },
        {  200,  190 }, {  200,  200 }, {    0,    0 }, {    0,    0 }, {    0,    0 }, {    0,    0 }, {    0,    0 }, {    0,    0 }, {    0,    0 },
        {    0,    0 }, {    0,    0 }, {    0,    0 }, {    0,    0 }, {    0,    0 }, {    0,    0 }, {    0,    0 }, {    0,    0 }, {    0,    0 },

        {   26,    0 }, {   70,   50 }, {   70,   70 }, {   80,   70 }, {   80,   80 }, {  130,   80 }, {  130,   70 }, {  150,   70 }, {  150,   60 },
        {  160,   60 }, {  160,   50 }, {  220,   50 }, {  220,   40 }, {  200,   40 }, {  200,   30 }, {  220,   30 }, {  220,   20 }, {  180,   20 },
        {  180,   10 }, {  170,   10 }, {  170,   20 }, {  160,   20 }, {  160,   30 }, {  150,   30 }, {  150,   40 }, {   80,   40 }, {   80,   50 } };

    if (!test(filename_1, expected_vertices_1, expected_polygons_1))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    if (!test(filename_2, expected_vertices_2, expected_polygons_2))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }

    if (!test(filename_3, expected_vertices_3, expected_polygons_3))
    {
        fprintf(stderr, "%s:%d:%s: Test failed\n", __FILE__, __LINE__, __FUNCTION__);
        return -1;
    }
    return 0;
}
